name: Release (Alpha)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - master

jobs:
  release:
    permissions:
      contents: write
      issues: write
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          # Add Poetry's bin directory to PATH
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      - name: Run semantic-release in pre-release (alpha) mode
        id: semantic_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_NAME: ${{ github.repository }}
        run: |
          # Get the latest tag and ensure it's used as the base version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0-alpha.0")
          echo "Latest tag found: $LATEST_TAG"

          # Configure git for semantic-release
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Remove the v prefix for semantic-release
          LATEST_VERSION=${LATEST_TAG#v}

          # Run semantic release and capture its output
          VERSION=$(SEMANTIC_RELEASE_LAST_VERSION=$LATEST_VERSION poetry run semantic-release version --prerelease --prerelease-token alpha -vv)
          if [ $? -eq 0 ]; then
            # Extract version number from semantic-release output
            NEW_VERSION=$(echo "$VERSION" | grep "New version: " | cut -d' ' -f3)
            if [ -n "$NEW_VERSION" ]; then
              echo "new_version=v${NEW_VERSION}" >> $GITHUB_OUTPUT
              # Now publish with the same version awareness
              SEMANTIC_RELEASE_LAST_VERSION=$LATEST_VERSION poetry run semantic-release publish --prerelease --prerelease-token alpha
            else
              echo "No new version detected"
              exit 0
            fi
          else
            echo "No new version to be released"
            exit 0
          fi

      - name: Create Git Tag
        if: steps.semantic_release.outputs.new_version != ''
        run: |
          git tag ${{ steps.semantic_release.outputs.new_version }}
          git push origin ${{ steps.semantic_release.outputs.new_version }}

      - name: Generate release notes
        id: release_notes
        if: steps.semantic_release.outputs.new_version != ''
        run: |
          # Determine the previous tag (if it exists)
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
              echo "No previous tag found. Generating release notes from the beginning."
              NOTES=$(git log --pretty=format:"- %s")
          else
              NOTES=$(git log "$PREV_TAG"..HEAD --pretty=format:"- %s")
          fi
          # Properly escape the notes for GitHub Actions
          NOTES="${NOTES//'%'/'%25'}"
          NOTES="${NOTES//$'\n'/'%0A'}"
          NOTES="${NOTES//$'\r'/'%0D'}"
          echo "notes=$NOTES" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.semantic_release.outputs.new_version != ''
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.semantic_release.outputs.new_version }}
          name: "Release ${{ steps.semantic_release.outputs.new_version }}"
          body: ${{ steps.release_notes.outputs.notes }}
          token: ${{ secrets.GITHUB_TOKEN }}
