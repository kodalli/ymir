name: Release (Alpha)

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  release:
    permissions:
      contents: write
      issues: write
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: |
          uv pip install python-semantic-release>=9.19.1,<10

      - name: Configure git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Run semantic-release
        id: semantic_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch all tags to ensure we have the complete history
          git fetch --tags

          # Run semantic release to determine new version
          semantic-release version --prerelease --prerelease-token alpha

          # Capture the new version from pyproject.toml
          NEW_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
          echo "New version from pyproject.toml: $NEW_VERSION"

          # Add v prefix for GitHub release
          echo "new_version=v${NEW_VERSION}" >> $GITHUB_OUTPUT

          # Publish the release
          semantic-release publish --prerelease --prerelease-token alpha

      - name: Generate release notes
        id: release_notes
        if: steps.semantic_release.outputs.new_version != ''
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
              echo "No previous tag found. Generating release notes from the beginning."
              NOTES=$(git log --pretty=format:"- %s")
          else
              echo "Generating release notes from $PREV_TAG to current commit."
              NOTES=$(git log "$PREV_TAG"..HEAD --pretty=format:"- %s")
          fi

          # Properly escape the notes for GitHub Actions
          NOTES="${NOTES//'%'/'%25'}"
          NOTES="${NOTES//$'\n'/'%0A'}"
          NOTES="${NOTES//$'\r'/'%0D'}"
          echo "notes=$NOTES" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.semantic_release.outputs.new_version != ''
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.semantic_release.outputs.new_version }}
          name: "Release ${{ steps.semantic_release.outputs.new_version }}"
          body: ${{ steps.release_notes.outputs.notes }}
          token: ${{ secrets.GITHUB_TOKEN }}
